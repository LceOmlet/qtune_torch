[predictor]
# SELECT count(*) FROM INFORMATION_SCHEMA.INNODB_METRICS where status='enabled';
predictor_output_dim = 65
# predictor_epoch
predictor_epoch = 100


[database_tune]
# Host IP Address
host = XX.XXX.XX.9
# Host Port Number
port = 3307
# Database User Name
user = root
# Database Name
database = XXX
# Database Password
password = XXXXXX
# Limit for the requests (queries) in a workload'
num_event = 1000
# Read percentage
p_r_range = 0.6
# Update percentage
p_u_index = 0.2
# Insert percentage
p_i = 0.1
# Delete percentage
p_d = 0.1
# Iteration Number
num_trial = 500
# Maximum sample number cached in RL
maxlen_mem = 2000
# maxlen_predict_mem
maxlen_predict_mem = 2000
# learning_rate
learning_rate = 1e-3
# Sample threshold to train RL
train_min_size = 3
# Training finish if the accumulated score is over the value
stopping_score = 90
# Training Performance Comparision
linelist = ['res_predict-1619930491','res_random-1619930491']
# [Latency, Throughput]
performance_metric = ['Latency']
# workload_file, like workload_file_example.txt
workload_file_path = /XX/CXX/XXX/sysbench_workload.txt
# thread_num
thread_num = 500
# thread_num dependent on the max connections   1/true  0/false
thread_num_auto = 1
# Optimizer type: 'adam' (DDPG RL), 'zero_order' (Zero-order RL), or 'bayesian' (Direct Bayesian Optimization)
optimizer_type = zero_order

[knob_config]
# you should increase the value of the table_open_cache variable if the numer of opened tables is large
table_open_cache = {'type':'infer','min_value':1,'max_value':2000,'length':1}
# The maximum permitted number of simultaneous client connections
max_connections = {'type':'infer','min_value': 20,'max_value': 100000,'length':1}
# The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
join_buffer_size = {'type':'infer','min_value': 128,'max_value': 134217728,'length':32}
# The size of the buffer that is allocated when preloading indexes.
preload_buffer_size = {'type':'infer','min_value': 1024,'max_value': 1073741824,'length':32}
# Each session that must perform a sort allocates a buffer of this size.
sort_buffer_size = {'type':'infer','min_value': 32768,'max_value': 134217728,'length':32}
# The size of the cache to hold changes to the binary log during a transaction.
binlog_cache_size = {'type':'infer','min_value': 4096,'max_value': 134217728,'length':32}
# The cutoff on the size of index values that determines which filesort algorithm to use.
max_length_for_sort_data = {'type':'infer','min_value': 4,'max_value': 8388608,'length':1}
# This variable limits the total number of prepared statements in the server. Setting the value to 0 disables prepared statements.
max_prepared_stmt_count = {'type':'infer','min_value': 0,'max_value': 1048576,'length':1}
# The number of times that any given stored procedure may be called recursively. The default value for this option is 0, which completely disables recursion in stored procedures. The maximum value is 255.
max_sp_recursion_depth = {'type':'infer','min_value': 0,'max_value': 255,'length':1}
# The maximum number of simultaneous connections permitted to any given MySQL user account. A value of 0 (the default) means "no limit."
max_user_connections = {'type':'infer','min_value': 0,'max_value': 4294967295,'length':1}
# If this value is greater than 1, MyISAM table indexes are created in parallel.
; myisam_repair_threads = {'type':'infer','min_value': 1,'max_value': 4294967295,'length':1}
#for test use ,innodb_buffer_pool_instances&innodb_buffer_pool_chunk_size is read only
read_buffer_size = {'type':'infer','min_value': 1,'max_value': 8589934592,'length':32}
# The size of buffer pool (bytes). A larger buffer pool requires less disk I/O to access the same table data more than once.
innodb_buffer_pool_size = {'type':'infer','min_value': 1048576,'max_value': 8589934592,'length':1048576}

[zero_order]
# Noise standard deviation for weight perturbation
noise_std = 0.1
# Noise decay rate
noise_decay = 0.99
# Learning rate decay
lr_decay = 0.99
# Decay step for learning rate and noise
decay_step = 50
# Whether to normalize rewards (true/false)
norm_rewards = true

[bayesian]
# Number of initial random points to evaluate before using the Gaussian Process
n_init_points = 5
# Acquisition function: 'ei' (Expected Improvement) or 'ucb' (Upper Confidence Bound)
acq_func = ei
# Initial noise level for the Gaussian Process
noise_level = 0.1
# Whether to normalize GP target values
normalize_y = true
# UCB kappa parameter (exploration vs exploitation tradeoff)
kappa = 2.576
# EI xi parameter (exploration vs exploitation tradeoff)
xi = 0.01
# Population size for each iteration
population_size = 10
# Random seed for reproducibility
random_seed = 42
